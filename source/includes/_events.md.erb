# Events

Any important billing activity that happens within your Invoiced account creates an event. Our event system can be used to track changes to important objects in your account, like invoices and customers.

Events are also the basis of our webhooks feature. Webhooks are HTTP callbacks that notify your systems as events are produced. Please see the [Webhooks Guide](https://invoiced.com/resources/docs/dev/webhooks) to learn more about webhooks.

## Event Object

### Attributes

```shell
<%= json data.events.object %>
```

```ruby
#<Invoiced::Event:0x3fdbf95e4d08 id=1228003> JSON: <%= json data.events.object %>
```

```php
Invoiced\Event JSON: <%= json data.events.object %>
```

```python
<Event id=1228003 at 0x3fdbf95e4d08> JSON: <%= json data.events.object %>
```

```java
com.invoiced.entity.Event@1c5119e JSON: <%= json data.events.object %>
```

```csharp
Invoiced.Event<1228003> <%= json data.events.object %>
```

```go
<Event id=1228003 at 1c5119e> JSON: <%= json data.events.object %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The event's unique ID
**object** | *string* | Object type, `event`
**type** | *string* | Event type
**timestamp** | *timestamp* | Time when event happened
**data** | *object* | Contains an `object` property with the object that was subject of the event and an optional `previous` property for `object.updated` events that is a hash of the old values that changed during the event

## Event Types

Events were named using the `object.action` pattern where `object` represents the subject of the event and `action` represents an operation on the object. You should expect to see the following event types:

- `contact.created`
- `contact.updated`
- `contact.deleted`
- `credit_note.created`
- `credit_note.updated`
- `credit_note.deleted`
- `credit_note.viewed`
- `customer.created`
- `customer.updated`
- `customer.deleted`
- `customer.merged`
- `email.sent`
- `email.not_sent`
- `estimate.created`
- `estimate.updated`
- `estimate.deleted`
- `estimate.viewed`
- `estimate.approved`
- `invoice.created`
- `invoice.updated`
- `invoice.deleted`
- `invoice.viewed`
- `invoice.payment_expected`
- `invoice.paid`
- `line_item.created` (pending line items only)
- `line_item.updated` (pending line items only)
- `line_item.deleted` (pending line items only)
- `note.created`
- `note.updated`
- `note.deleted`
- `payment_plan.created`
- `payment_plan.updated`
- `payment_plan.deleted`
- `payment_source.created`
- `payment_source.updated`
- `payment_source.deleted`
- `task.created`
- `task.updated`
- `task.deleted`
- `task.completed`
- `subscription.created`
- `subscription.updated`
- `subscription.deleted`
- `transaction.created`
- `transaction.updated`
- `transaction.deleted`

## Retrieve an event

```shell
curl "https://api.invoiced.com/events/:id" \
  -u {API_KEY}:
```

```ruby
event = invoiced.Event.retrieve("{EVENT_ID}")
```

```php
<?php

$event = $invoiced->Event->retrieve("{EVENT_ID}");
```

```python
event = client.Event.retrieve("{EVENT_ID}")
```

```java
Event event = invoiced.newEvent().retrieve({EVENT_ID});
```

```csharp
var event = invoiced.NewEvent().Retrieve({EVENT_ID});
```

```go
event, err := invoiced.NewEvent().Retrieve({EVENT_ID})
```

> The above command returns JSON structured like this:

```shell
<%= json data.events.retrieve %>
```

```ruby
#<Invoiced::Event:0x3fdbf95e4d08 id=1228003> JSON: <%= json data.events.retrieve %>
```

```php
Invoiced\Event JSON: <%= json data.events.retrieve %>
```

```python
<Event id=1228003 at 0x3fdbf95e4d08> JSON: <%= json data.events.retrieve %>
```

```java
com.invoiced.entity.Event@cb8fd58 JSON: <%= json data.events.retrieve %>
```

```csharp
Invoiced.Event<1228003> <%= json data.events.retrieve %>
```

```go
<Event id=1228003 at cb8fd58> JSON: <%= json data.events.retrieve %>
```

This endpoint retrieves a specific event.

### HTTP Request

`GET /events/:id`

## List all events

```shell
curl "https://api.invoiced.com/events" \
  -u {API_KEY}:
```

```ruby
events, metadata = invoiced.Event.list(:per_page => 3)
```

```php
<?php

list($events, $metadata) = $invoiced->Event->all(['per_page' => 3]);
```

```python
events, metadata = invoiced.Event.list(per_page=3)
```

```java
EntityList<Event> events = connection.newEvent().listAll();
```

```csharp
var events = invoiced.NewEvent().ListAll();
```

```go
events, err := invoiced.NewEvent().ListAll(nil, nil)
```

> The above command returns JSON structured like this:

```shell
[
  <%= json data.events.list_all, 1 %>
]
```

```ruby
[
  #<Invoiced::Event:0x3fdbf95e4d08 id=212047> JSON: <%= json data.events.list_all, 1 %>
]
```

```php
[
  Invoiced\Event JSON: <%= json data.events.list_all, 1 %>
]
```

```python
[
  <Event id=1228003 at 0x3fdbf95e4d08> JSON: <%= json data.events.list_all, 1 %>
]
```

```java
[
  com.invoiced.entity.Event@1c5119e JSON: <%= json data.events.list_all, 1 %>
] 
```

```csharp
[
  Invoiced.Event<1228003> <%= json data.events.list_all, 1 %>
]
```

```go
[
  <Event id=1228003 at 1c5119e> JSON: <%= json data.events.list_all, 1 %>
]
```

This endpoint retrieves all events in reverse chronological order. You can also retrieve events related to a specific object.

### HTTP Request

`GET /events`

### Query Parameters

Parameter | Description
--------- | -----------
**related_to** *string* | Optional object to filter events that are returned. Format: `object type,object ID`, i.e. `customer,1234`