# Metered Billing

Metered billing on Invoiced allows you to bill customers for charges that occur during a billing cycle outside of their ordinary subscription. These charges are called **pending line items**. A pending line item is a [Line Item](#line-item-object) that has been attached to a customer, but not billed yet. Pending line items will be swept up by the next invoice that is triggered for the customer. This happens automatically with subscription invoices or when [triggering an invoice manually](#trigger-an-invoice).

## Create a pending line item

```shell
curl "https://api.invoiced.com/customers/:customer_id/line_items" \
  -u {API_KEY}: \
  -d catalog_item="delivery"
```

```ruby
customer = invoiced.Customer.retrieve("{CUSTOMER_ID}")
customer.line_items.create(
  :catalog_item => "delivery"
)
```

```php
<?php

$customer = $invoiced->Customer->retrieve("{CUSTOMER_ID}");
$customer->lineItems()->create([
  'catalog_item' => "delivery"
]);
```

```python
customer = client.Customer.retrieve("{CUSTOMER_ID}")
customer.line_items().create(
  catalog_item="delivery"
)
```

```java
Customer customer = invoiced.newCustomer().retrieve({CUSTOMER_ID});
PendingLineItem pli = customer.newPendingLineItem();
pli.catalogItem = "delivery";
pli.create();
```

```csharp
var customer = invoiced.NewCustomer().Retrieve({CUSTOMER_ID});
var pli = customer.NewPendingLineItem();
pli.CatalogItem = "delivery";
pli.Create();
```

> The above command returns JSON structured like this:

```shell
<%= json data.pending_line_items.object %>
```

```ruby
#<Invoiced::LineItem:0x3fdbf95e4d08 id=8> JSON: <%= json data.pending_line_items.object %>
```

```php
Invoiced\LineItem JSON: <%= json data.pending_line_items.object %>
```

```python
<LineItem id=8 at 0x3fdbf95e4d08> JSON: <%= json data.pending_line_items.object %>
```

```java
com.invoiced.entity.PendingLineItem@754f2c43 JSON: <%= json data.pending_line_items.object %>
```

```csharp
Invoiced.PendingLineItem<8> <%= json data.pending_line_items.object %>
```

Create a new pending line item with this endpoint.

### HTTP Request

`POST /customers/:customer_id/line_items`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**catalog_item** | *string* | Optional Catalog ItemÂ ID. Fills the line item with the name and pricing of the Catalog Item.
**type** | *string* | Optional line item type. Used to group line items by type in reporting
**name** | *string* | Title
**description** | *string* | Optional description
**quantity** | *number* | Quantity
**unit_cost** | *number* | Unit cost or rate
**discountable** | *boolean* | Excludes amount from invoice discounts when `false`, defaults to `true
**discounts** | *array* | Line item Discounts
**taxable** | *boolean* | Excludes amount from invoice taxes when `false`, defaults to `true
**taxes** | *array* | Line item Taxes
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Retrieve a pending line item

```shell
curl "https://api.invoiced.com/customers/:customer_id/line_items/:id" \
  -u {API_KEY}:
```

```ruby
customer = invoiced.Customer.retrieve("{CUSTOMER_ID}")
line_item = customer.line_items.retrieve("{LINE_ITEM_ID}")
```

```php
<?php

$customer = $invoiced->Customer->retrieve("{CUSTOMER_ID}");
$lineItem = $customer->lineItems()->retrieve("{LINE_ITEM_ID}");
```

```python
customer = client.Customer.retrieve("{CUSTOMER_ID}")
line_item = customer.line_items().retrieve("{LINE_ITEM_ID}")
```

```java
Customer customer = invoiced.newCustomer().retrieve({CUSTOMER_ID});
PendingLineItem pli = customer.newPendingLineItem().retrieve({LINE_ITEM_ID});
```

```csharp
var customer = invoiced.NewCustomer().Retrieve({CUSTOMER_ID});
var pli = customer.NewPendingLineItem().Retrieve({LINE_ITEM_ID});
```

> The above command returns JSON structured like this:

```shell
<%= json data.pending_line_items.object %>
```

```ruby
#<Invoiced::LineItem:0x3fdbf95e4d08 id=8> JSON: <%= json data.pending_line_items.object %>
```

```php
Invoiced\LineItem JSON: <%= json data.pending_line_items.object %>
```

```python
<LineItem id=8 at 0x3fdbf95e4d08> JSON: <%= json data.pending_line_items.object %>
```

```java
com.invoiced.entity.PendingLineItem@754f2c43 JSON: <%= json data.pending_line_items.object %>
```

```csharp
Invoiced.PendingLineItem<8> <%= json data.pending_line_items.object %>
```

This endpoint retrieves a specific pending line item.

### HTTP Request

`GET /customers/:customer_id/line_items/:id`

## Update a pending line item

```shell
curl "https://api.invoiced.com/customers/:customer_id/line_items/:id" \
  -u {API_KEY}: \
  -d quantity=2 \
  -X PATCH
```

```ruby
line_item.quantity = 2
line_item.save
```

```php
<?php

$lineItem->quantity = 2;
$lineItem->save();
```

```python
line_item.quantity = 2
line_item.save()
```

```java
PendingLineItem pli = customer.newPendingLineItem().retrieve({LINE_ITEM_ID});
pli.quantity = 2;
pli.save();
```

```csharp
var pli = customer.NewPendingLineItem().Retrieve({LINE_ITEM_ID});
pli.Quantity = 2;
pli.SaveAll();
```

> The above command returns JSON structured like this:

```shell
<%= json data.pending_line_items._update %>
```

```ruby
#<Invoiced::LineItem:0x3fdbf95e4d08 id=8> JSON: <%= json data.pending_line_items._update %>
```

```php
Invoiced\LineItem JSON: <%= json data.pending_line_items._update %>
```

```python
<LineItem id=8 at 0x3fdbf95e4d08> JSON: <%= json data.pending_line_items._update %>
```

```java
com.invoiced.entity.PendingLineItem@754f2c43 JSON: <%= json data.pending_line_items._update %>
```

```csharp
Invoiced.PendingLineItem<8> <%= json data.pending_line_items._update %>
```

Use this endpoint to update a pending line item.

### HTTP Request

`PATCH /customers/:customer_id/line_items/:id`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**type** | *string* | Optional line item type. Used to group line items by type in reporting
**name** | *string* | Title
**description** | *string* | Optional description
**quantity** | *number* | Quantity
**unit_cost** | *number* | Unit cost or rate
**discountable** | *boolean* | Excludes amount from invoice discounts when `false`, defaults to `true
**discounts** | *array* | Line item Discounts
**taxable** | *boolean* | Excludes amount from invoice taxes when `false`, defaults to `true
**taxes** | *array* | Line item Taxes
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Trigger an invoice

```shell
curl "https://api.invoiced.com/customers/:customer_id/invoices" \
  -u {API_KEY}: \
  -X POST
```

```ruby
invoice = customer.invoice
```

```php
<?php

$invoice = $customer->invoice();
```

```python
invoice = customer.invoice()
```

```java
Invoice invoice = customer.invoice();
```

```csharp
var invoice = customer.Invoice();
```

> The above command returns JSON structured like this:

```shell
<%= json data.pending_line_items.trigger %>
```

```ruby
#<Invoiced::Invoice:0x3fdbf95e4d08 id=46225> JSON: <%= json data.pending_line_items.trigger %>
```

```php
Invoiced\Invoice JSON: <%= json data.pending_line_items.trigger %>
```

```python
<Invoice id=46225 at 0x3fdbf95e4d08> JSON: <%= json data.pending_line_items.trigger %>
```

```java 
com.invoiced.entity.Invoice@3df85de JSON: <%= json data.pending_line_items.trigger %>
```

```csharp
Invoiced.Invoice<46225> <%= json data.pending_line_items.trigger %>
```

This endpoint generates an invoice for a customer with its pending line items.

### HTTP Request

`POST /customers/:customer_id/invoices`

<aside class="warning">
An invalid request error will be thrown if the customer has no pending line items.
</aside>

## Delete a pending line item

```shell
curl "https://api.invoiced.com/customers/:customer_id/line_items/:id" \
  -u {API_KEY}: \
  -X DELETE
```

```ruby
line_item.delete
```

```php
<?php

$lineItem->delete();
```

```python
line_item.delete()
```

```java
PendingLineItem pli = customer.newPendingLineItem().retrieve({LINE_ITEM_ID});
pli.delete();
```

```csharp
var pli = customer.NewPendingLineItem().Retrieve({LINE_ITEM_ID});
pli.Delete();
```

> The above command returns `204 No Content`

This endpoint deletes a specific pending line item.

### HTTP Request

`DELETE /customers/:customer_id/line_items/:id`

## List all pending line items

```shell
curl "https://api.invoiced.com/customers/:customer_id/line_items" \
  -u {API_KEY}:
```

```ruby
customer = invoiced.Customer.retrieve("{CUSTOMER_ID}")
line_items, metadata = customer.line_items.list(:per_page => 3)
```

```php
<?php

$customer = $invoiced->Customer->retrieve("{CUSTOMER_ID}");
list($lineItems, $metadata) = $customer->lineItems()->all(['per_page' => 3]);
```

```python
customer = client.Customer.retrieve("{CUSTOMER_ID}")
line_items, metadata = customer.line_items().list(per_page=3)
```

```java
PendingLineItem pli = customer.newPendingLineItem();
EntityList<PendingLineItem> plis = pli.listAll();
```

```csharp
var plis = customer.NewPendingLineItem().ListAll();
```

> The above command returns JSON structured like this:

```shell
[
  <%= json data.pending_line_items.object, 1 %>
]
```

```ruby
[
  #<Invoiced::LineItem:0x3fdbf95e4d08 id=8> JSON: <%= json data.pending_line_items.object, 1 %>
]
```

```php
[
  Invoiced\LineItem JSON: <%= json data.pending_line_items.object, 1 %>
]
```

```python
[
  <LineItem id=8 at 0x3fdbf95e4d08> JSON: <%= json data.pending_line_items.object, 1 %>
]
```

```java
[
  com.invoiced.entity.PendingLineItem@5dac2ea1 JSON: <%= json data.pending_line_items.object, 1 %>
]
```

```csharp
[
  Invoiced.PendingLineItem<8> <%= json data.pending_line_items.object, 1 %>
]
```

This endpoint retrieves all pending line items.

### HTTP Request

`GET /customers/:customer_id/line_items`

### Query Parameters

Parameter | Description
--------- | -----------
**sort** *string* | Column to sort by, i.e. `name asc`
**filter** *object* | Filter object
**metadata** *object* | Metadata filter object
