# Payments

Payments are used to represent a customer payment. Payments encompass payments processed through Invoiced, cash receipts (like wire transfers and check), application of credit note and spending credit balances.

It is not required for payments to be associated with a customer or be fully applied, although the goal is to eventually apply the payment in full. The balance on payments represents the amount that is unapplied. Payments can only be associated with a single customer at a time. A payment without an associated customer means that the payment came from a data source where the customer that originated the payment is not yet known.

## Payment Object

### Attributes

```shell
<%= json data.payments.object %>
```

```ruby
#<Invoiced::Payment:0x3fdbf95e4d08 id=61> JSON: <%= json data.payments.object %>
```

```php
Invoiced\Payment JSON: <%= json data.payments.object %>
```

```python
<Payment id=61 at 0x3fdbf95e4d08> JSON: <%= json data.payments.object %>
```

```java
com.invoiced.entity.Payment@4ed0a875 JSON: <%= json data.payments.object %>
```

```csharp
Invoiced.Payment<61> <%= json data.payments.object %>
```

```go
<Payment id=61 at 4ed0a875> JSON: <%= json data.payments.object %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The payment's unique ID
**object** | *string* | Object type, `payment`
**customer** | *integer* | Associated Customer, if any
**date** | *timestamp* | Payment date
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Payment amount
**balance** | *number* | Unapplied amount remaining
**matched** | *boolean* | When true there is a CashMatch suggestion
**voided** | *boolean* | Indicates that the payment was voided
**method** | *string* | Payment instrument used
**ach_sender_id** | *string* | ACH PPD ID
**reference** | *string* | Reference number, i.e. check #
**source** | *string* | Source of the payment
**notes** | *string* | Internal notes
**charge** | *object* | [Charge object](#charge-object) included for processed payments
**applied_to** | *array* | List of [Payment Applications](#payment-application)
**pdf_url** | *string* | URL where receipt PDF can be downloaded
**created_at** | *timestamp* | Timestamp when created

### Payment Application

A payment application describes how a payment is applied. Payments can have multiple applications as long as the applied amounts do not exceed the payment amount.

These types of payment applications are supported:
* Convenience fee (`type=convenience_fee`)
* Customer credit balance (`type=credit`)
* Credit note (`type=credit_note`)
* Estimate deposit (`type=estimate`)
* Invoice (`type=invoice`)

Parameter | Type | Description
--------- | ---- | -----------
**amount** | *number* | Amount to apply
**type** | *string* | One of `convenience_fee`, `credit`, `credit_note`, `estimate`, or `invoice`
**invoice** | *integer* | Invoice ID, required when `type=invoice`
**estimate** | *integer* | Estimate ID, required when `type=estimate`
**credit_note** | *integer* | Credit Note ID, required when `type=credit_note`
**document_type** | *string* | One of `estimate` or `invoice`, required when `type=credit_note`

## Charge Object

### Attributes

```shell
<%= json data.charges.object %>
```

```ruby
#<Invoiced::Charge:0x3fdbf95e4d08 id=46374> JSON: <%= json data.charges.object %>
```

```php
Invoiced\Charge JSON: <%= json data.charges.object %>
```

```python
<Charge id=46374 at 0x3fdbf95e4d08> JSON: <%= json data.charges.object %>
```

```java
com.invoiced.entity.Charge@4ed0a875 JSON: <%= json data.charges.object %>
```

```csharp
Invoiced.Charge<46374> <%= json data.charges.object %>
```

```go
<Charge id=46374 at 4ed0a875> JSON: <%= json data.charges.object %>
```


Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The charge's unique ID
**object** | *string* | Object type, `charge`
**customer** | *integer* | Associated Customer
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Charge amount
**test** | *string* | Payment test on which payment was processed
**gateway_id** | *string* | Transaction ID on payment test
**status** | *string* | Transaction status on payment test
**receipt_email** | *string* | Email address where receipt was sent
**failure_message** | *string* | Failure reason if charge fails
**payment_source** | *object* | [Payment Source](#payment-sources) that was used
**amount_refunded** | *number* | Total amount refunded
**refunded** | *boolean* | True if fully refunded
**refunds** | *array* | List of [Refunds](#refund-object)
**disputed** | *boolean* | True if charge has been disputed
**created_at** | *timestamp* | Timestamp when created

## Refund Object

### Attributes

```shell
<%= json data.refunds.object %>
```

```ruby
#<Invoiced::Refund:0x3fdbf95e4d08 id=5309> JSON: <%= json data.refunds.object %>
```

```php
Invoiced\Refund JSON: <%= json data.refunds.object %>
```

```python
<Refund id=5309 at 0x3fdbf95e4d08> JSON: <%= json data.refunds.object %>
```

```java
com.invoiced.entity.Refund@4ed0a875 JSON: <%= json data.refunds.object %>
```

```csharp
Invoiced.Refund<5309> <%= json data.refunds.object %>
```

```go
<Refund id=5309 at 4ed0a875> JSON: <%= json data.refunds.object %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The refund's unique ID
**object** | *string* | Object type, `refund`
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Payment amount
**charge** | *integer* | Original charge ID
**test** | *string* | Payment test on which refund was processed
**gateway_id** | *string* | Transaction ID on payment test
**status** | *string* | Refund status on payment test
**failure_message** | *string* | Failure reason if refund fails
**created_at** | *timestamp* | Timestamp when created

## Create a payment

```shell
curl "https://api.invoiced.com/payments" \
  -u {API_KEY}: \
  -d amount=800 \
  -d method="check" \
  -d reference="1450" \
  -d applied_to[0][type]="invoice" \
  -d applied_to[0][amount]=800 \
  -d applied_to[0][invoice]=44648
```

```ruby
invoiced.Payment.create(
  :amount => 800,
  :method => "check",
  :reference => "1450",
  :applied_to => [{
    :type => "invoice",
    :invoice => 44648,
    :amount => 800
  }]
)
```

```php
<?php

$invoiced->Payment->create([
  'amount' => 800,
  'method' => "check",
  'reference' => "1450",
  'applied_to' => [[
    'type' => 'invoice',
    'invoice' => 44648,
    'amount' => 800,
  ]]
]);
```

```python
client.Payment.create(
  amount=800,
  method="check",
  reference="1450",
  applied_to=[{
    'type': 'invoice',
    'invoice': 44648,
    'amount': 800
  }]
)
```

```java
Payment payment = invoiced.newPayment();
payment.amount = 800D;
payment.method = "check";
payment.reference = "1450";
paymentItem = new PaymentItem();
paymentItem.type = "invoice";
paymentItem.invoice = 44648L;
paymentItem.amount = 800D;
payment.appliedTo = PaymentItem{paymentItem};
payment.create();
```

```csharp
var payment = invoiced.NewPayment();
payment.Amount = 800;
payment.Method = "check";
payment.Reference = "1450";
payment.Invoice = 44648;
payment.Create();
```

```go
payment := invoiced.NewPayment()
payment.Amount = 800
payment.Method = "check"
payment.Reference = "1450"
payment.Invoice = 44648
payment, err := payment.Create(payment)
```

> The above command returns JSON structured like this:

```shell
<%= json data.payments.create %>
```

```ruby
#<Invoiced::Payment:0x3fdbf95e4d08 id=30939> JSON: <%= json data.payments.create %>
```

```php
Invoiced\Payment JSON: <%= json data.payments.create %>
```

```python
<Payment id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.payments.create %>
```

```java
com.invoiced.entity.Payment@4ed0a875 JSON: <%= json data.payments.create %>
```

```csharp
Invoiced.Payment<20939> <%= json data.payments.create %>
```

```go
<Payment id=20939 at 4ed0a875> JSON: <%= json data.payments.create %>
```

Create a new payment with this endpoint.

### HTTP Request

`POST /payments`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, optional
**date** | *timestamp* | Payment date, defaults to current timestamp
**method** | *string* | Payment instrument used, defaults to `other`
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Payment amount
**reference** | *string* | Reference number, i.e. check #
**ach_sender_id** | *string* | Originator ID (ACH payments)
**source** | *string* | Source of the payment, defualts to `keyed`
**notes** | *string* | Internal notes
**applied_to** | *array* | List of [Payment Applications](#payment-application)

## Retrieve a payment

```shell
curl "https://api.invoiced.com/payments/:id" \
  -u {API_KEY}:
```

```ruby
payment = invoiced.Payment.retrieve("{PAYMENT_ID}")
```

```php
<?php

$payment = $invoiced->Payment->retrieve("{PAYMENT_ID}");
```

```python
payment = client.Payment.retrieve("{PAYMENT_ID}")
```

```java
Payment payment = invoiced.newPayment().retrieve({PAYMENT_ID});
```

```csharp
var payment = invoiced.NewPayment().Retrieve({PAYMENT_ID});
```

```go
payment, err := invoiced.NewPayment().Retrieve({PAYMENT_ID})
```

> The above command returns JSON structured like this:

```shell
<%= json data.payments.object %>
```

```ruby
#<Invoiced::Payment:0x3fdbf95e4d08 id=20939> JSON: <%= json data.payments.object %>
```

```php
Invoiced\Payment JSON: <%= json data.payments.object %>
```

```python
<Payment id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.payments.object %>
```

```java
com.invoiced.entity.Payment@4ed0a875 JSON: <%= json data.payments.object %>
```

```csharp
Invoiced.Payment<20939> <%= json data.payments.object %>
```

```go
<Payment id=20939 at 4ed0a875> JSON: <%= json data.payments.object %>
```

This endpoint retrieves a specific payment. If you want to see how the payment is applied then you must add `?include=applied_to` to the request.

### HTTP Request

`GET /payments/:id`

## Update a payment

```shell
curl "https://api.invoiced.com/payments/:id" \
  -u {API_KEY}: \
  -d notes="Check was received by Jan" \
  -X PATCH
```

```ruby
payment.notes = "Check was received by Jan"
payment.save
```

```php
<?php

$payment->notes = "Check was received by Jan";
$payment->save();
```

```python
payment.notes = "Check was received by Jan"
payment.save()
```

```java
payment.notes = "Check was received by Jan";
payment.save();
```

```csharp
payment.Notes = "Check was received by Jan";
payment.SaveAll();
```

```go
payment.Notes = "Check was received by Jan"
err := payment.Save()
```

> The above command returns JSON structured like this:

```shell
<%= json data.payments._update %>
```

```ruby
#<Invoiced::Payment:0x3fdbf95e4d08 id=20939> JSON: <%= json data.payments._update %>
```

```php
Invoiced\Payment JSON: <%= json data.payments._update %>
```

```python
<Payment id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.payments._update %>
```

```java
com.invoiced.entity.Payment@4ed0a875 JSON: <%= json data.payments._update %>
```

```csharp
Invoiced.Payment<20939> <%= json data.payments._update %>
```

```go
<Payment id=20939 at 4ed0a875> JSON: <%= json data.payments._update %>
```

Use this endpoint to update a payment.

### HTTP Request

`PATCH /payments/:id`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, optional
**date** | *timestamp* | Payment date, defaults to current timestamp
**method** | *string* | Payment instrument used, defaults to `other`
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Payment amount
**reference** | *string* | Reference number, i.e. check #
**ach_sender_id** | *string* | Originator ID (ACH payments)
**source** | *string* | Source of the payment, defualts to `keyed`
**notes** | *string* | Internal notes
**applied_to** | *array* | Payment application

## Send a receipt

```shell
curl "https://api.invoiced.com/payments/:id/emails" \
  -u {API_KEY}: \
  -X POST
```

```ruby
emails = payment.send
```

```php
<?php

$emails = $payment->send();
```

```python
emails = payment.send()
```

```java
EmailRequest emailRequest = new EmailRequest();
EmailRecipient[] emailRecipients = new EmailRecipient[1];
emailRecipients[0] = new EmailRecipient();
emailRecipients[0].name = "Client";
emailRecipients[0].email = "client@example.com";
emailRequest.to = emailRecipients;
emailRequest.subject = "Receipt for your recent payment to Dunder Mifflin, Inc.";
emailRequest.message = "Dear Client, we have attached a receipt for your most recent payment. Thank you!";
Email[] emails = payment.send(emailRequest);
```

```csharp
var emailRequest = new EmailRequest();
var emailRecipients = new EmailRecipient[1];
emailRecipients[0] = new EmailRecipient();
emailRecipients[0].Name = "Client";
emailRecipients[0].Email = "client@example.com";
emailRequest.To = emailRecipients;
emailRequest.Subject = "Receipt for your recent payment to Dunder Mifflin, Inc.";
emailRequest.Message = "Dear Client, we have attached a receipt for your most recent payment. Thank you!";
var emails = payment.SendEmail(emailRequest);
```

```go
var emailRequest invdendpoint.EmailRequest
emailRecipients := make([]invdendpoint.EmailDetail, 1)
emailRecipients[0].Name = "Client"
emailRecipients[0].Email = "client@example.com"

emailRequest.To = emailRecipients
emailRequest.Subject = "Receipt for your recent payment to Dunder Mifflin, Inc."
emailRequest.Message = "Dear Client, we have attached a receipt for your most recent payment. Thank you!"

emails, err := payment.SendEmail(&emailRequest)
```

> The above command returns JSON structured like this:

```shell
[
	<%= json data.emails.receipt, 1 %>
]
```

```ruby
[
  #<Invoiced::Email:0x3fdbf95e4d08 id=f45382c6fbc44d44aa7f9a55eb2ce731> JSON: <%= json data.emails.receipt, 1 %>
]
```

```php
[
  Invoiced\Email JSON: <%= json data.emails.receipt, 1 %>
]
```

```python
[
  <Email id=f45382c6fbc44d44aa7f9a55eb2ce731 at 0x3fdbf95e4d08> JSON: <%= json data.emails.receipt, 1 %>
]
```

```java
//To pretty print a array of Objects use Arrays.toString(Object[]);
[
  com.invoiced.entity.Email@12497547 JSON: <%= json data.emails.receipt, 1 %>
]
```

```csharp
[
  Invoiced.Email<f45382c6fbc44d44aa7f9a55eb2ce731> <%= json data.emails.receipt, 1 %>
]
```

```go
[
  <Email id=f45382c6fbc44d44aa7f9a55eb2ce731 at 12497547> JSON: <%= json data.emails.receipt, 1 %>
]
```

This endpoint sends a PDF receipt to the customer.

### HTTP Request

`POST /payments/:id/emails`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**to** | *array* | Optional array of recipients like:<br/>`[{"name": "Client", "email": "client@example.com"}]`
**bcc** | *string* | Optional comma-separated list of email addresses to be blind carbon copied
**template** | *string* | Optional email template ID, otherwise a standard email template is selected
**subject** | *string* | Optional subject to override the template
**message** | *string* | Optional message body to override the template

<aside class="info">
A successful response means that your email has been added to the send queue.
</aside>

## Void a payment

```shell
curl "https://api.invoiced.com/payments/:id" \
  -u {API_KEY}: \
  -X DELETE
```

```ruby
payment.delete
```

```php
<?php

$payment->delete();
```

```python
payment.delete()
```

```java
payment.voidPayment();
```

```csharp
payment.Delete();
```

```go
payment.Delete()
```

> The above command returns JSON structured like this:

```shell
<%= json data.payments.void %>
```

```ruby
#<Invoiced::Payment:0x3fdbf95e4d08 id=20939> JSON: <%= json data.payments.void %>
```

```php
Invoiced\Payment JSON: <%= json data.payments.void %>
```

```python
<Payment id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.payments.void %>
```

```java
com.invoiced.entity.Payment@4ed0a875 JSON: <%= json data.payments.void %>
```

```csharp
Invoiced.Payment<20939> <%= json data.payments.void %>
```

```go
<Payment id=20939 at 4ed0a875> JSON: <%= json data.payments.void %>
```

This endpoint voids a specific payment.

### HTTP Request

`DELETE /payments/:id`

## List all payments

```shell
curl "https://api.invoiced.com/payments" \
  -u {API_KEY}:
```

```ruby
payments, metadata = invoiced.Payment.list(:per_page => 3)
```

```php
<?php

list($payments, $metadata) = $invoiced->Payment->all(['per_page' => 3]);
```

```python
payments, metadata = client.Payment.list(per_page=3)
```

```java
EntityList<Payment> payments = invoiced.newPayment().listAll();
```

```csharp
var payments = invoiced.NewPayment().ListAll();
```

```go
payments, err := invoiced.NewPayment().ListAll(nil, nil)
```

> The above command returns JSON structured like this:

```shell
[
	<%= json data.payments.object, 1 %>
]
```

```ruby
[
  #<Invoiced::Payment:0x3fdbf95e4d08 id=20939> JSON: <%= json data.payments.object, 1 %>
]
```

```php
[
  Invoiced\Payment JSON: <%= json data.payments.object, 1 %>
]
```

```python
[
  <Payment id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.payments.object, 1 %>
]
```

```java
[
  com.invoiced.entity.Payment@52638766 JSON: <%= json data.payments.object, 1 %>
]
```

```csharp
[
  Invoiced.Payment<20939> <%= json data.payments.object, 1 %>
]
```

```go
[
  <Payment id=20939 at 52638766> JSON: <%= json data.payments.object, 1 %>
]
```

This endpoint retrieves all payments.

### HTTP Request

`GET /payments`

### Query Parameters

Parameter | Description
--------- | -----------
**sort** *string* | Column to sort by, i.e. `name asc`
**filter** *object* | Filter object
**start_date** *timestamp* | Restricts the results to payments *on or after* the given timestamp
**end_date** *timestamp* | Restricts the results to payments *on or before* the given timestamp
**updated_after** *timestamp* | Only gets records updated after the given timestamp

## Create a charge

```shell
# (Tokenized Payment Info)

curl 'https://api.invoiced.com/charges' \
  -u API_KEY: \
  --data '{"customer":401558,"currency":"usd","amount":2000,"applied_to":[{"type":"invoice","invoice":2112620,"amount":1710},{"type":"invoice","invoice":2112622,"amount":290}],"method":"credit_card","invoiced_token":"acdf7f31da641970cdb9c6c46a373577"}'

# (Saved Payment Source)

curl 'https://api.invoiced.com/charges' \
  -u API_KEY: \
  --data '{"customer":401558,"currency":"usd","amount":2000,"applied_to":[{"type":"invoice","invoice":2112620,"amount":1710},{"type":"invoice","invoice":2112622,"amount":290}],"method":"credit_card","payment_source_type":"card","payment_source_id":1234}'
```


```ruby
invoiced.Charge.create(
  :customer => 401558,
  :currency => "usd",
  :amount => 2000,
  :applied_to => [
    {
      :type => "invoice",
      :invoice => 2112620,
      :amount => 1710
    },
    {
      :type => "invoice",
      :invoice => 2112622,
      :amount => 290
    }
  ],
  :method => "credit_card",

# (Tokenized Payment Info)
  :invoiced_token => "acdf7f31da641970cdb9c6c46a373577",

# (Saved Payment Source)
  :payment_source_type => "card",
  :payment_source_id => 1234
)
```

```php
<?php

$charge = $invoiced->Charge->create([
  'customer' => 401558,
  'currency' => "usd",
  'amount' => 2000,
  'applied_to' => [
    [
      'type' => 'invoice',
      'invoice' => 2112620,
      'amount' => 1710
    ],
    [
      'type' => 'invoice',
      'invoice' => 2112622,
      'amount' => 290
    ],
  ],
  'method' => "credit_card",

// (Tokenized Payment Info)
  'invoiced_token' => "acdf7f31da641970cdb9c6c46a373577",

// (Saved Payment Source)
  'payment_source_type' => "card",
  'payment_source_id' => 1234
]);
```

```python
client.Charge.create(
  customer = 401558,
  currency = "usd",
  amount = 2000,
  applied_to = [
    {
      'type': 'invoice',
      'invoice': 2112620,
      'amount': 1710
    },
    {
      'type': 'invoice',
      'invoice': 2112622,
      'amount': 290
    },
  ],
  method = "credit_card",

# (Tokenized Payment Info)
  invoiced_token = "acdf7f31da641970cdb9c6c46a373577",

# (Saved Payment Source)
  payment_source_type = "card",
  payment_source_id = 1234
)
```

```java
ChargeRequest chargeRequest = new ChargeRequest();
chargeRequest.customer = 401558L;
chargeRequest.currency = "usd";
chargeRequest.amount = 2000D;
paymentItem1 = new PaymentItem();
paymentItem1.type = "invoice";
paymentItem1.invoice = 2112620L;
paymentItem1.amount = 1710D;
paymentItem2 = new PaymentItem();
paymentItem2.type = "invoice";
paymentItem2.invoice = 2112622L;
paymentItem2.amount = 290D;
chargeRequest.appliedTo = PaymentItem{paymentItem1, paymentItem2};
chargeRequest.method = "credit_card";

// (Tokenized Payment Info)
chargeRequest.invoicedToken = "acdf7f31da641970cdb9c6c46a373577";

// (Saved Payment Source)
chargeRequest.paymentSourceType = "card";
chargeRequest.paymentSourceId = 1234;

Charge charge = invoiced.newCharge().create(chargeRequest);
```

```csharp
var chargeRequest = new ChargeRequest();
chargeRequest.Customer = 401558;
chargeRequest.Currency = "usd";
chargeRequest.Amount = 2000;
chargeRequest.AppliedTo = new[]
{
    new PaymentItem {Type = "invoice", Amount = 1710, Invoice = 2112620},
    new PaymentItem {Type = "invoice", Amount = 290, Invoice = 2112622}
};
chargeRequest.Method = "credit_card";

// (Tokenized Payment Info)
chargeRequest.InvoicedToken = "acdf7f31da641970cdb9c6c46a373577";

// (Saved Payment Source)
chargeRequest.PaymentSourceType = "card";
chargeRequest.PaymentSourceId = 1234;

var charge = invoiced.NewCharge().Create(chargeRequest);
```

```go
chargeRequest := new(invdendpoint.ChargeRequest)

chargeRequest.Customer = 401558
chargeRequest.Currency = "usd"
chargeRequest.Amount = 2000
chargeRequest.AppliedTo = [...] // excluded for brevity
chargeRequest.Method = "credit_card"

// (Tokenized Payment Info)
chargeRequest.InvoicedToken = "acdf7f31da641970cdb9c6c46a373577"

// (Saved Payment Source)
chargeRequest.PaymentSourceType = "card"
chargeRequest.PaymentSourceId = 1234

charge := invoiced.NewCharge().Create(chargeRequest)
```

> The above command returns JSON structured like this:

```shell
<%= json data.payments.charge %>
```

```ruby
#<Invoiced::Payment:0x3fdbf95e4d08 id=32554> JSON: <%= json data.payments.charge %>
```

```php
Invoiced\Payment JSON: <%= json data.payments.charge %>
```

```python
<Payment id=32554 at 0x3fdbf95e4d08> JSON: <%= json data.payments.charge %>
```

```java
com.invoiced.entity.Payment@4ed0a875 JSON: <%= json data.payments.charge %>
```

```csharp
Invoiced.Payment<32554> <%= json data.payments.charge %>
```

```go
<Payment id=32554 at 4ed0a875> JSON: <%= json data.payments.charge %>
```

This endpoint allows you to process a payment.

### HTTP Request

`POST /charges`

### Attributes

Requests must supply exactly one of **a)** `payment_source_type` with `payment_source_id`, **b)** `invoiced_token`, or **c)** `gateway_token`.

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, required
**method** | *integer* | Payment method ID, required
**currency** | *string* | Optional, defaults to company currency
**amount** | *number* | Charge amount, required
**invoiced_token** | *string* | Optional, generated by `invoiced.js`
**gateway_token** | *string* | Optional, generated by payment test
**payment_source_type** | *string* | One of `card`, `bank_account`
**payment_source_id** | *number* | Optional, card or bank account ID
**vault_method** | *boolean* | Optional; when true, vaults the payment source on the customer's account
**make_default** | *boolean* | Optional; when this and `vault_method` are true, saves payment as default on customer's account
**receipt_email** | *string* | Optional; where the payment receipt is sent
**applied_to** | *array* | Required, List of [Payment Applications](#payment-application)

## Refund a charge

```shell
curl "https://api.invoiced.com/charges/:id/refunds" \
  -u {API_KEY}: \
  -X POST
```

```ruby
refund = invoiced.Refund.create("{CHARGE_ID}", :amount => 400)
```

```php
<?php

$refund = $invoiced->Refund->create("{CHARGE_ID}", ['amount' => 400]);
```

```python
refund = client.Refund.create("{CHARGE_ID}", amount=400)
```

```java
Refund refund = invoiced.newRefund().create(CHARGE_ID, 400);
```

```csharp
var refund = invoiced.NewRefund().Create(CHARGE_ID, 400);
```

```go
err := invoiced.NewRefund().Create(CHARGE_ID, 400)
```

> The above command returns JSON structured like this:

```shell
<%= json data.refunds.create %>
```

```ruby
#<Invoiced::Refund:0x3fdbf95e4d08 id=5309> JSON: <%= json data.refunds.create %>
```

```php
Invoiced\Refund JSON: <%= json data.refunds.create %>
```

```python
<Refund id=5309 at 0x3fdbf95e4d08> JSON: <%= json data.refunds.create %>
```

```java
com.invoiced.entity.Refund@424ba398 JSON: <%= json data.refunds.create %>
```

```csharp
Invoiced.Refund<5309> <%= json data.refunds.create %>
```

```go
<Refund id=5309 at 424ba398> JSON: <%= json data.refunds.create %>
```

You can issue a refund for a charge that was processed through Invoiced. When a refund is created we will attempt to initiate the refund over the payment test it happened on. If the refund operation fails on the payment test for any reason then the refund will not be created an an error will be returned.

Partial refunds are allowed, however, the total amount refunded cannot exceed the original charge amount.

### HTTP Request

`POST /charges/:id/refunds`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**amount** | *number* | Amount to refund - **required**

<aside class="notice">
We will initiate the refund through the original payment test for the requested amount.
</aside>
