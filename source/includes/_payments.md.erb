# Payments

On Invoiced we use the Transaction concept to represent any monetary value that is transferred between a merchant and customer. In our world, if an invoice describes a balance owed by a customer then a transaction represents the payment of that balance. Transactions can also describe other types of value transfer beyond payments, like refunds and credits.

A transaction can be one of these types:

- `charge`: an electronic charge or payment
- `payment`: offline payment received from the customer, i.e. a check
- `refund`: money refunded to the customer
- `adjustment`: a debit or credit to the customer's credit balance

We automatically record `charge` and `refund` transactions that happen through Invoiced for you. Transactions can be associated with a document, like an invoice or credit note, however not all transactions will reference a document.

We currently support the following payment methods on transactions:

- `credit_card`
- `ach`
- `direct_debit`
- `paypal`
- `wire_transfer`
- `check`
- `cash`
- `other`

`adjustment` transactions will always use the `balance` payment method. Since our system is designed from the perspective of the merchant, a negative adjustment represents a credit to the customer and a positive adjustment represents a charge to the customer. For example, if you wanted to credit your customer for $20 then you would create an `adjustment` transaction for -$20. Furthermore, adjustments can have a credit note associated.

## Transaction Object

### Attributes

```shell
<%= json data.transactions.object %>
```

```ruby
#<Invoiced::Transaction:0x3fdbf95e4d08 id=20939> JSON: <%= json data.transactions.object %>
```

```php
Invoiced\Transaction JSON: <%= json data.transactions.object %>
```

```python
<Transaction id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.transactions.object %>
```

```java
com.invoiced.entity.Transaction@4ed0a875 JSON: <%= json data.transactions.object %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The transaction's unique ID
**object** | *string* | Object type, `transaction`
**customer** | *integer* | Associated Customer
**invoice** | *integer* | Associated Invoice, if any
**credit_note** | *integer* | Associated Credit Note, if any
**date** | *timestamp* | Transaction date
**type** | *string* | Transaction type, `charge`, `payment`, `refund`, or `adjustment`
**method** | *string* | Payment instrument used to facilitate transaction
**status** | *string* | Transaction status, one of `succeeded`, `pending`, or `failed`
**gateway** | *string* | Payment gateway that processed the transaction, if any
**gateway_id** | *string* | Transaction ID from the payment gateway
**payment_source** | *object* | Payment source used for transaction, if any
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Transaction amount
**notes** | *string* | Internal notes
**failure_reason** | *string* | Failure message from the payment gateway (only available when `status` = `failed`)
**parent_transaction** | *integer* | ID of the original transaction for refunds
**pdf_url** | *string* | URL to download the invoice as a PDF
**created_at** | *timestamp* | Timestamp when created
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Create a transaction

```shell
curl "https://api.invoiced.com/transactions" \
  -u {API_KEY}: \
  -d invoice=44648 \
  -d method="check" \
  -d gateway_id="1450" \
  -d amount=800
```

```ruby
invoiced.Transaction.create(
  :invoice => 44648,
  :method => "check",
  :gateway_id => "1450",
  :amount => 800
)
```

```php
<?php

$invoiced->Transaction->create([
  'invoice' => 44648,
  'method' => "check",
  'gateway_id' => "1450",
  'amount' => 800
]);
```

```python
client.Transaction.create(
  invoice=44648,
  method="check",
  gateway_id="1450",
  amount=800
)
```

```java
Transaction transaction = invoiced.newTransaction();
transaction.invoice = 44648;
transaction.method = "check";
transaction.gatewayId = "1450";
transaction.amount = 800;
transaction.create();
```

> The above command returns JSON structured like this:

```shell
<%= json data.transactions.create %>
```

```ruby
#<Invoiced::Transaction:0x3fdbf95e4d08 id=30939> JSON: <%= json data.transactions.create %>
```

```php
Invoiced\Transaction JSON: <%= json data.transactions.create %>
```

```python
<Transaction id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.transactions.create %>
```

```java
com.invoiced.entity.Transaction@4ed0a875 JSON: <%= json data.transactions.create %>
```

Create a new transaction with this endpoint.

### HTTP Request

`POST /transactions`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, required if invoice ID is not supplied
**invoice** | *integer* | Invoice ID, if any
**credit_note** | *integer* | Associated Credit Note, if any
**type** | *string* | Transaction type, `charge`, `payment`, `refund`, or `adjustment` - **required**
**date** | *timestamp* | Transaction date, defaults to current timestamp
**method** | *string* | Payment instrument used to facilitate transaction, defaults to `other`
**status** | *string* | Transaction status, one of `succeeded`, `pending`, or `failed`, defaults to `succeeded`
**gateway** | *string* | Payment gateway that processed the transaction, if any
**gateway_id** | *string* | Transaction ID from the payment gateway, or check # if method is `check`
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Transaction amount
**notes** | *string* | Internal notes
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Retrieve a transaction

```shell
curl "https://api.invoiced.com/transactions/:id" \
  -u {API_KEY}:
```

```ruby
transaction = invoiced.Transaction.retrieve("{TRANSACTION_ID}")
```

```php
<?php

$transaction = $invoiced->Transaction->retrieve("{TRANSACTION_ID}");
```

```python
transaction = client.Transaction.retrieve("{TRANSACTION_ID}")
```

```java
Transaction transaction = invoiced.newTransaction().retrieve({TRANSACTION_ID});
```

> The above command returns JSON structured like this:

```shell
<%= json data.transactions.object %>
```

```ruby
#<Invoiced::Transaction:0x3fdbf95e4d08 id=20939> JSON: <%= json data.transactions.object %>
```

```php
Invoiced\Transaction JSON: <%= json data.transactions.object %>
```

```python
<Transaction id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.transactions.object %>
```

```java
com.invoiced.entity.Transaction@4ed0a875 JSON: <%= json data.transactions.object %>
```

This endpoint retrieves a specific transaction.

### HTTP Request

`GET /transactions/:id`

## Update a transaction

```shell
curl "https://api.invoiced.com/transactions/:id" \
  -u {API_KEY}: \
  -d notes="Check was received by Jan" \
  -X PATCH
```

```ruby
transaction.notes = "Check was received by Jan"
transaction.save
```

```php
<?php

$transaction->notes = "Check was received by Jan";
$transaction->save();
```

```python
transaction.notes = "Check was received by Jan"
transaction.save()
```

```java
transaction.notes = "Check was received by Jan";
transaction.save();
```

> The above command returns JSON structured like this:

```shell
<%= json data.transactions._update %>
```

```ruby
#<Invoiced::Transaction:0x3fdbf95e4d08 id=20939> JSON: <%= json data.transactions._update %>
```

```php
Invoiced\Transaction JSON: <%= json data.transactions._update %>
```

```python
<Transaction id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.transactions._update %>
```
```java
com.invoiced.entity.Transaction@4ed0a875 JSON: <%= json data.transactions._update %>
```

Use this endpoint to update a transaction.

### HTTP Request

`PATCH /transactions/:id`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**date** | *timestamp* | Transaction date, defaults to current timestamp
**method** | *string* | Payment instrument used to facilitate transaction, defaults to `other`
**status** | *string* | Transaction status, one of `succeeded`, `pending`, or `failed`, defaults to `succeeded`
**gateway** | *string* | Payment gateway that processed the transaction, if any
**gateway_id** | *string* | Transaction ID from the payment gateway, or check # if method is `check`
**currency** | *string* | [3-letter ISO code](https://en.wikipedia.org/wiki/ISO_4217)
**amount** | *number* | Transaction amount
**notes** | *string* | Internal notes
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Send a receipt

```shell
curl "https://api.invoiced.com/transactions/:id/emails" \
  -u {API_KEY}: \
  -X POST
```

```ruby
emails = transaction.send
```

```php
<?php

$emails = $transaction->send();
```

```python
emails = transaction.send()
```

```java
EmailRequest emailRequest = new EmailRequest();
EmailRecipient[] emailRecipients = new EmailRecipient[1];
emailRecipients[0] = new EmailRecipient();
emailRecipients[0].name = "Client";
emailRecipients[0].email = "client@example.com";
emailRequest.to = emailRecipients;
emailRequest.subject = "Receipt for your recent payment to Dunder Mifflin, Inc.";
emailRequest.message = "Dear Client, we have attached a receipt for your most recent payment. Thank you!";
Email[] emails = transaction.send(emailRequest);
```

> The above command returns JSON structured like this:

```shell
[
	<%= json data.emails.receipt, 1 %>
]
```

```ruby
[
  #<Invoiced::Email:0x3fdbf95e4d08 id=f45382c6fbc44d44aa7f9a55eb2ce731> JSON: <%= json data.emails.receipt, 1 %>
]
```

```php
[
  Invoiced\Email JSON: <%= json data.emails.receipt, 1 %>
]
```

```python
[
  <Email id=f45382c6fbc44d44aa7f9a55eb2ce731 at 0x3fdbf95e4d08> JSON: <%= json data.emails.receipt, 1 %>
]
```

```java
//To pretty print a array of Objects use Arrays.toString(Object[]);
[
  com.invoiced.entity.Email@12497547 JSON: <%= json data.emails.receipt, 1 %>
]
```

This endpoint sends a PDF receipt to the customer.

### HTTP Request

`POST /transactions/:id/emails`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**to** | *array* | Optional array of recipients like:<br/>`[{"name": "Client", "email": "client@example.com"}]`
**bcc** | *string* | Optional comma-separated list of email addresses to be blind carbon copied
**subject** | *string* | Optional subject
**message** | *string* | Optional message body, otherwise the *Payment Receipt Email* template is used

<aside class="info">
A successful response means that your email has been added to the send queue.
</aside>

## Refund a transaction

```shell
curl "https://api.invoiced.com/transactions/:id/refunds" \
  -u {API_KEY}: \
  -X POST
```

```ruby
refund = transaction.refund(:amount => 400)
```

```php
<?php

$refund = $transaction->refund(['amount' => 400]);
```

```python
refund = transaction.refund(amount=400)
```

```java
Transaction refund = transaction.refund(400);
```

> The above command returns JSON structured like this:

```shell
<%= json data.transactions.refund %>
```

```ruby
#<Invoiced::Transaction:0x3fdbf95e4d08 id=20952> JSON: <%= json data.transactions.refund %>
```

```php
Invoiced\Transaction JSON: <%= json data.transactions.refund %>
```

```python
<Transaction id=20952 at 0x3fdbf95e4d08> JSON: <%= json data.transactions.refund %>
```

```java
com.invoiced.entity.Transaction@424ba398 JSON: <%= json data.transactions.refund %>
```

You can issue a refund for `charge` and `payment` transactions. When a refund is issued for a `charge` transaction we will attempt to initiate the refund over the payment gateway it happened on.

Of course, when refunding `payment` transactions you would have to return the money to your customer. This endpoint simply provides a means to track any refunds that you issue for offline payments.

Partial refunds are allowed, however, the total amount refunded cannot exceed the original transaction amount.

### HTTP Request

`POST /transactions/:id/refunds`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**amount** | *number* | Amount to refund - **required**

<aside class="notice">
We will initiate the refund through the payment gateway for <code>charge</code> transactions that have a valid payment gateway attached.
</aside>

## Delete a transaction

```shell
curl "https://api.invoiced.com/transactions/:id" \
  -u {API_KEY}: \
  -X DELETE
```

```ruby
transaction.delete
```

```php
<?php

$transaction->delete();
```

```python
transaction.delete()
```

```java
transaction.delete();
```

> The above command returns `204 No Content`

This endpoint deletes a specific transaction.

### HTTP Request

`DELETE /transactions/:id`

## List all transactions

```shell
curl "https://api.invoiced.com/transactions" \
  -u {API_KEY}:
```

```ruby
transactions, metadata = invoiced.Transaction.list(:per_page => 3)
```

```php
<?php

list($transactions, $metadata) = $invoiced->Transaction->all(['per_page' => 3]);
```

```python
transactions, metadata = invoiced.Transaction.list(per_page=3)
```

```java
EntityList<Transaction> transactions = invoiced.newTransaction().listAll();
```

> The above command returns JSON structured like this:

```shell
[
	<%= json data.transactions.object, 1 %>
]
```

```ruby
[
  #<Invoiced::Transaction:0x3fdbf95e4d08 id=20939> JSON: <%= json data.transactions.object, 1 %>
]
```

```php
[
  Invoiced\Transaction JSON: <%= json data.transactions.object, 1 %>
]
```

```python
[
  <Transaction id=20939 at 0x3fdbf95e4d08> JSON: <%= json data.transactions.object, 1 %>
]
```

```java
[
  com.invoiced.entity.Transaction@52638766 JSON: <%= json data.transactions.object, 1 %>
]
```
This endpoint retrieves all transactions.

### HTTP Request

`GET /transactions`

### Query Parameters

Parameter | Description
--------- | -----------
**sort** *string* | Column to sort by, i.e. `name asc`
**filter** *object* | Filter object
**metadata** *object* | Metadata filter object
**start_date** *timestamp* | Restricts the results to transactions *on or after* the given timestamp
**end_date** *timestamp* | Restricts the results to transactions *on or before* the given timestamp
**updated_after** *timestamp* | Only gets records updated after the given timestamp

## Initiate a charge

```shell
(Tokenized Payment Info)

curl 'https://api.invoiced.com/charges' \
  -u API_KEY: \
  --data '{"customer":401558,"currency":"usd","amount":2000,"splits":[{"type":"invoice","invoice":2112620,"amount":1710},{"type":"invoice","invoice":2112622,"amount":290}],"method":"credit_card","invoiced_token":"acdf7f31da641970cdb9c6c46a373577"}'

(Saved Payment Source)

curl 'https://api.invoiced.com/charges' \
  -u API_KEY: \
  --data '{"customer":401558,"currency":"usd","amount":2000,"splits":[{"type":"invoice","invoice":2112620,"amount":1710},{"type":"invoice","invoice":2112622,"amount":290}],"method":"credit_card","payment_source_type":"card","payment_source_id":1234}'
```

```ruby

invoiced.Charge.create(
  :customer => 401558,
  :currency => "usd",
  :amount => 2000,
  :splits => [...], # excluded for brevity
  :method => "credit_card",

  (Tokenized Payment Info)
  :invoiced_token => "acdf7f31da641970cdb9c6c46a373577",

  (Saved Payment Source)
  :payment_source_type => "card",
  :payment_source_id => 1234
)
```

```php
<?php

$invoiced->Charge->create([
  'customer' => 401558,
  'currency' => "usd",
  'amount' => 2000,
  'splits' => [...], // excluded for brevity
  'method' => "credit_card",

  (Tokenized Payment Info)
  'invoiced_token' => "acdf7f31da641970cdb9c6c46a373577",

  (Saved Payment Source)
  'payment_source_type' => "card",
  'payment_source_id' => 1234
]);
```

```python
client.Charge.create(
  customer = 401558,
  currency = "usd",
  amount = 2000,
  splits = [...], # excluded for brevity
  method = "credit_card",

  (Tokenized Payment Info)
  invoiced_token = "acdf7f31da641970cdb9c6c46a373577",

  (Saved Payment Source)
  payment_source_type = "card",
  payment_source_id = 1234
)
```

```java
Charge charge = invoiced.newCharge();
charge.customer = 401558;
charge.currency = "usd";
charge.amount = 2000;
charge.splits = [...]; // excluded for brevity
charge.method = "credit_card";

(Tokenized Payment Info)
charge.invoiced_token = "acdf7f31da641970cdb9c6c46a373577";

(Saved Payment Source)
charge.payment_source_type = "card";
charge.payment_source_id = 1234;

charge.create();
```

> The above command returns JSON structured like this:

```shell
<%= json data.charges.create %>
```

```ruby
#<Invoiced::Charge:0x3fdbf95e4d08 id=5d9e31d812151> JSON: <%= json data.charges.create %>
```

```php
Invoiced\Charge JSON: <%= json data.charges.create %>
```

```python
<Charge id=5d9e31d812151 at 0x3fdbf95e4d08> JSON: <%= json data.charges.create %>
```

```java
com.invoiced.entity.Charge@4ed0a875 JSON: <%= json data.charges.create %>
```

Initiate a new charge with this endpoint.

### HTTP Request

`POST /charges`

### Attributes

Requests must supply exactly one of **a)** `payment_source_type` with `payment_source_id`, **b)** `invoiced_token`, or **c)** `gateway_token`.

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, required
**method** | *integer* | Payment method ID, required
**currency** | *string* | Optional, defaults to company currency
**amount** | *number* | Charge amount, required
**invoiced_token** | *string* | Optional, generated by `invoiced.js`
**gateway_token** | *string* | Optional, generated by payment gateway
**payment_source_type** | *string* | One of `card`, `bank_account`
**payment_source_id** | *number* | Optional, card or bank account ID
**vault_method** | *boolean* | Optional; when true, vaults the payment source on the customer's account
**make_default** | *boolean* | Optional; when this and `vault_method` are true, saves payment as default on customer's account
**reciept_email** | *string* | Optional; where the payment receipt is sent
**splits** | *array* | Required, contains payment application, i.e. `[{“type”: “invoice”, “invoice”: 1234, “amount”: 400.00}]`