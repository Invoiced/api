# Subscription Billing

Subscriptions allow you to set up recurring billing for your customers. Creating a Subscription will bill a customer according to a given Plan. Addons let you bill for additonal line items that get added onto the base plan price. An addon can be another plan that must have the same billing interval as the subscription's primary plan.

Subscriptions can have a fixed or infinite duration. Setting the `cycles` property will end the subscription after a fixed number of billing cycles. Otherwise, the subscription must be canceled in order to be stopped.

By default subscriptions will renew each billing cycle on the same day of the cycle on which it was started. For example, a subscription that started on the 9th of the month will always renew on the 9th of the month. This is known as **Anniversary Billing**. We also support renewing subscriptions on a specific day of the month, i.e. the first. If the subscription does not begin on the day you've specified then the first bill will be prorated. This is called **Calendar Billing**.

Subscriptions can optionally include a contract period, the length of which is measured in a number of billing cycles. At the end of the contract term, these subscriptions can be set to renew or end automatically, or to renew pending manual approval.

## Subscription Object

### Attributes

```shell
<%= json data.subscriptions.object %>
```

```ruby
#<Invoiced::Subscription:0x3fdbf95e4d08 id=595> JSON: <%= json data.subscriptions.object %>
```

```php
Invoiced\Subscription JSON: <%= json data.subscriptions.object %>
```

```python
<Subscription id=595 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions.object %>
``` 
```java
com.invoiced.entity.Subscription@74f0915b JSON: <%= json data.subscriptions.object %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The subscription's unique ID
**object** | *string* | Object type, `subscription`
**customer** | *integer* | Associated Customer
**plan** | *string* | Plan ID
**start_date** | *timestamp* | Timestamp subscription starts (or started)
**bill_in** | *string* | `advance` or `arrears`. Defaults to `advance`
**quantity** | *integer* | Plan quantity. Defaults to 1
**addons** | *array* | Collection of Subscription Addons
**discounts** | *array* | Collection of Coupon Objects
**cycles** | *integer* | Number of billing cycles the subscription runs for, when `null` runs until canceled (default).
**period_start** | *timestamp* | Start of the current billing period
**period_end** | *timestamp* | End of the current billing period
**cancel_at_period_end** | *boolean* | When true the subscription will be canceled at the end of the current billing period
**canceled_at** | *timestamp* | Timestamp the subscription was canceled
**status** | *string* | Subscription status, one of `not_started`, `active`, `past_due`, `finished`, `canceled`
**paused** | *boolean* | When true, subscription is paused
**contract_period_start** | *timestamp* | Start of current contract period
**contract_period_end** | *timestamp* | End of current contract period
**contract_renewal_cycles** | *integer* | Number of billing cycles in next contract period
**contract_renewal_mode** | *string* | `auto`, `manual`, `renew_once`, or `none`. Defaults to `none`
**taxes** | *array* | Collection of Tax Rate Objects
**recurring_total** | *number* | Total recurring amount (includes taxes)
**mrr** | *number* | Monthly Recurring Revenue (MRR)
**url** | *string* | URL to manage the subscription in the billing portal
**created_at** | *timestamp* | Timestamp when created
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Subscription Addon Object

### Attributes

```shell
<%= json data.subscriptions.addon_object %>
```

```ruby
#<Invoiced::SubscriptionAddon:0x3fdbf95e4d08 id=3> JSON: <%= json data.subscriptions.addon_object %>
```

```php
Invoiced\SubscriptionAddon JSON: <%= json data.subscriptions.addon_object %>
```

```python
<SubscriptionAddon id=3 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions.addon_object %>
```

```java
com.invoiced.entity.SubscriptionAddon@6ec9001c JSON: <%= json data.subscriptions.addon_object %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The subscription's unique ID
**object** | *string* | Object type, `subscription_addon`
**plan** | *string* | PlanÂ ID
**quantity** | *integer* | Quantity
**description** | *string* | Optional description for line items generated from this addon
**created_at** | *timestamp* | Timestamp when created

## Create a subscription

```shell
curl "https://api.invoiced.com/subscriptions" \
  -u {API_KEY}: \
  -d customer=15444 \
  -d plan="starter" \
  -d addons[0][plan]="ipad-license" \
  -d addons[0][quantity]=11

```

```ruby
invoiced.Subscription.create(
	:customer => 15444,
	:plan => "starter",
	:addons => [
		{
			:plan => "ipad-license",
			:quantity => 11
		}
	]
)
```

```php
<?php

$invoiced->Subscription->create([
	'customer' => 15444,
	'plan' => "starter",
	'addons' => [
		[
			'plan' => "ipad-license",
			'quantity' => 11
		]
	]
]);
```

```python
client.Subscription.create(
	customer=15444,
	plan="starter",
	addons=[
		{
			'plan': "ipad-license",
			'quantity': 11
		}
	]
)
```

```java
Subscription subscription = invoiced.newSubscription();
subscription.customer = 15444;
subscription.plan = "starter";
subscription.addons = new SubscriptionAddon[1];
subscription.addons[0] = new SubscriptionAddon();
subscription.addons[0].plan = "ipad-license";
subscription.addons[0].quantity = 11;
subscription.create();
```

> The above command returns JSON structured like this:

```shell
<%= json data.subscriptions.create %>
```

```ruby
#<Invoiced::Subscription:0x3fdbf95e4d08 id=595> JSON: <%= json data.subscriptions.create %>
```

```php
Invoiced\Subscription JSON: <%= json data.subscriptions.create %>
```

```python
<Subscription id=595 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions.create %>
```

```java
com.invoiced.entity.Subscription@46bbce72 JSON: <%= json data.subscriptions.create %>
```

Create a new subscription with this endpoint.

### HTTP Request

`POST /subscriptions`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, required
**plan** | *string* | Plan ID, required
**start_date** | *integer* | Timestamp subscription begins, defaults to `now`
**bill_in** | *string* | `advance` or `arrears`. Defaults to `advance`
**quantity** | *integer* | Plan quantity. Defaults to 1
**addons** | *array* | Collection of optional Subscription Addons
**discounts** | *array* | Collection of Coupon IDs
**cycles** | *integer* | Number of billing cycles the subscription runs for, when `null` runs until canceled (default).
**snap_to_nth_day** | *integer* | Snap billing cycles to a specific day of the month (also known as calendar billing), off by default
**paused** | *boolean* | When true, subscription is paused
**contract_renewal_cycles** | *integer* | Number of billing cycles in next contract period
**contract_renewal_mode** | *string* | `auto`, `manual`, `renew_once`, or `none`
**taxes** | *array* | Collection of Tax Rate IDs
**cancel_at_period_end** | *boolean* | When true the subscription will be canceled at the end of the current billing period
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Preview a subscription

```shell
curl "https://api.invoiced.com/subscriptions/preview" \
  -u {API_KEY}: \
  -d customer=481594 \
  -d plan="starter" \
```

```ruby
invoiced.Subscription.preview(
	:customer => 481594,
	:plan => "starter"
)
```

```php
<?php

$invoiced->Subscription->preview([
	'customer' => 481594,
	'plan' => "starter"
]);
```

```python
client.Subscription.preview(
	customer=481594,
	plan="starter"
)
```

```java
Subscription subscription = invoiced.newSubscription();
subscription.customer = 481594;
subscription.plan = "starter";
subscription.preview();
```

> The above command returns JSON structured like this:

```shell
<%= json data.subscriptions._preview %>
```

```ruby
#<Invoiced::Subscription:0x3fdbf95e4d08 id=false> JSON: <%= json data.subscriptions._preview %>
```

```php
Invoiced\Subscription JSON: <%= json data.subscriptions._preview %>
```

```python
<Subscription id=false at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions._preview %>
```

```java
com.invoiced.entity.Subscription@46bbce72 JSON: <%= json data.subscriptions._preview %>
```

The subscription preview endpoint lets you get an estimate of the first invoice, recurring total, and MRR of a subscription without creating a customer, subscription, or any other data.

The plan and any referenced items must exist.

### HTTP Request

`POST /subscriptions/preview`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**customer** | *integer* | Customer ID, required
**plan** | *string* | Plan ID, required
**quantity** | *integer* | Plan quantity. Defaults to 1
**addons** | *array* | Collection of optional Subscription Addons
**discounts** | *array* | Collection of Coupon IDs
**taxes** | *array* | Collection of Tax Rate IDs
**pending_line_items** | *array* | Collection of pending line items

## Retrieve a subscription

```shell
curl "https://api.invoiced.com/subscriptions/:id" \
  -u {API_KEY}:
```

```ruby
subscription = invoiced.Subscription.retrieve("{SUBSCRIPTION_ID}")
```

```php
<?php

$subscription = $invoiced->Subscription->retrieve("{SUBSCRIPTION_ID}");
```

```python
subscription = client.Subscription.retrieve("{SUBSCRIPTION_ID}")
```

```java
Subscription subscription = invoiced.newSubscription().retrieve({SUBSCRIPTION_ID});
```

> The above command returns JSON structured like this:

```shell
<%= json data.subscriptions.object %>
```

```ruby
#<Invoiced::Subscription:0x3fdbf95e4d08 id=595> JSON: <%= json data.subscriptions.object %>
```

```php
Invoiced\Subscription JSON: <%= json data.subscriptions.object %>
```

```python
<Subscription id=595 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions.object %>
```

```java
com.invoiced.entity.Subscription@46bbce72 JSON: <%= json data.subscriptions.object %>
```

This endpoint retrieves a specific subscription.

### HTTP Request

`GET /subscriptions/:id`

## Update a subscription

```shell
curl "https://api.invoiced.com/subscriptions/:id" \
  -u {API_KEY}: \
  -d plan="pro" \
  -X PATCH
```

```ruby
subscription.plan = "pro"
subscription.save
```

```php
<?php

$subscription->plan = "pro";
$subscription->save();
```

```python
subscription.plan = "pro"
subscription.save()
```

```java
subscription.plan = "pro";
subscription.save();
```

> The above command returns JSON structured like this:

```shell
<%= json data.subscriptions._update %>
```

```ruby
#<Invoiced::Subscription:0x3fdbf95e4d08 id=595> JSON: <%= json data.subscriptions._update %>
```

```php
Invoiced\Subscription JSON: <%= json data.subscriptions._update %>
```

```python
<Subscription id=595 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions._update %>
```

```java
com.invoiced.entity.Subscription@46bbce72 JSON: <%= json data.subscriptions._update %>
```

Use this endpoint to update a subscription.

### HTTP Request

`PATCH /subscriptions/:id`

### Request Parameters

Parameter | Type | Description
--------- | ---- | -----------
**plan** | *string* | Plan ID, required
**start_date** | *integer* | Timestamp subscription begins, defaults to `now`
**quantity** | *integer* | Plan quantity. Defaults to 1
**addons** | *array* | Collection of optional Subscription Addons
**discounts** | *array* | Collection of Coupon IDs
**paused** | *boolean* | When true, subscription is paused
**taxes** | *array* | Collection of Tax Rate IDs
**contract_renewal_cycles** | *integer* | Number of billing cycles in next contract period
**contract_renewal_mode** | *string* | `auto`, `manual`, `renew_once`, or `none`
**cancel_at_period_end** | *boolean* | When true the subscription will be canceled at the end of the current billing period
**prorate** | *boolean* | Prorate changes to plan, quantities, or addons, defaults to *true*
**proration_date** | *integer* | Timestamp when the proration happened, defaults to `now`
**metadata** | *object* | A hash of key/value pairs that can store additional information about this object.

## Cancel a subscription

```shell
curl "https://api.invoiced.com/subscriptions/:id" \
  -u {API_KEY}: \
  -X DELETE
```

```ruby
subscription.cancel
```

```php
<?php

$subscription->cancel();
```

```python
subscription.cancel()
```

```java
subscription.cancel();
```

> The above command returns JSON structured like this:

```shell
<%= json data.subscriptions.cancel %>
```

```ruby
#<Invoiced::Subscription:0x3fdbf95e4d08 id=595> JSON: <%= json data.subscriptions.cancel %>
```

```php
Invoiced\Subscription JSON: <%= json data.subscriptions.cancel %>
```

```python
<Subscription id=595 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions.cancel %>
```

```java
com.invoiced.entity.Subscription@46bbce72 JSON: <%= json data.subscriptions.cancel %>
```

This endpoint cancels a subscription.

### HTTP Request

`DELETE /subscriptions/:id`

## List all subscriptions

```shell
curl "https://api.invoiced.com/subscriptions" \
  -u {API_KEY}:
```

```ruby
subscriptions, metadata = invoiced.Subscription.list(:per_page => 3)
```

```php
<?php

list($subscriptions, $metadata) = $invoiced->Subscription->all(['per_page' => 3]);
```

```python
subscriptions, metadata = invoiced.Subscription.list(per_page=3)
```

```java
EntityList<Subscription> subscriptions = invoiced.newSubscription().listAll();
```

> The above command returns JSON structured like this:

```shell
[
    <%= json data.subscriptions._update, 1 %>
]
```

```ruby
[
  #<Invoiced::Subscription:0x3fdbf95e4d08 id=595> JSON: <%= json data.subscriptions._update, 1 %>
]
```

```php
[
  Invoiced\Subscription JSON: <%= json data.subscriptions._update, 1 %>
]
```

```python
[
  <Subscription id=595 at 0x3fdbf95e4d08> JSON: <%= json data.subscriptions._update, 1 %>
]
```

```java
[
  com.invoiced.entity.Subscription@20b4fc7b JSON: <%= json data.subscriptions._update, 1 %>
]
```

This endpoint retrieves all subscriptions. Unless specified, this endpoint will only return subscriptions that have an upcoming renewal.

### HTTP Request

`GET /subscriptions`

### Query Parameters

Parameter | Description
--------- | -----------
**sort** *string* | Column to sort by, i.e. `period_end asc`
**filter** *object* | Filter object
**metadata** *object* | Metadata filter object
**canceled** *boolean* | When true returns only canceled subscriptions
**finished** *boolean* | When true returns only finished subscriptions
**updated_after** *timestamp* | Only gets records updated after the given timestamp
