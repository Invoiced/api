# Notes

<aside class="info">
Notes API is currently in beta and subject to change.
</aside>

Represents an internal note related to a customer or invoice. These notes appear in the Invoiced dashboard only and are distinct from the customer-facing `notes` field on the invoice object.

## Note Object

### Attributes

```shell
<%= json data.notes.create %>
```

```ruby
#<Invoiced::Note:0x3fdbf95e4d08 id=501> JSON: <%= json data.notes.create %>
```

```php
Invoiced\Note JSON: <%= json data.notes.create %>
```

```python
<Note id=501 at 0x3fdbf95e4d08> JSON: <%= json data.notes.create %>
```

```java
com.invoiced.entity.Note@e48fa2a JSON: <%= json data.notes.create %>
```

```csharp
Invoiced.Note<501> <%= json data.notes.create %>
```

```go
<Note id=501 at f95e4d08> JSON: <%= json data.notes.create %>
```

Parameter | Type | Description
--------- | ---- | -----------
**id** | *integer* | The note's unique ID
**object** | *string* | Object type, `note`
**notes** | *string* | Contents of note
**customer** | *integer* | Customer associated with note
**invoice** | *integer* | Invoice associated with note
**created_at** | *timestamp* | Timestamp when created
**user** | *object* | Object describing user who created note

## Create a note

```shell
curl "https://api.invoiced.com/notes" \
  -u {API_KEY}: \
  -d invoice_id=46225 \
  -d notes="Customer called 10/1, clarified account terms."
```

```ruby
invoiced.Note.create(
  :invoice_id => 46225,
  :notes => "Customer called 10/1, clarified account terms."
)
```

```php
<?php

$note = $invoiced->Note->create([
  'invoice_id' => 46225,
  'notes' => "Customer called 10/1, clarified account terms."
]);
```

```python
client.Note.create(
  invoice_id=46225,
  notes="Customer called 10/1, clarified account terms."
)
```

```java
Invoice invoice = invoiced.newInvoice().retrieve(46225);
Note note = invoice.newNote();
note.notes = "Customer called 10/1, clarified account terms.";
note.create();
```

```csharp
var invoice = invoiced.NewInvoice().Retrieve(46225);
var note = invoice.NewNote();
note.Notes = "Customer called 10/1, clarified account terms.";
note.Create();
```

```go
request := invdendpoint.CreateNoteRequest{InvoiceID:int64(46225)}
note, err := invoiced.NewNote().Create(request)
```

> The above command returns JSON structured like this:

```shell
<%= json data.notes.create %>
```

```ruby
#<Invoiced::Note:0x3fdbf95e4d08 id=501> JSON: <%= json data.notes.create %>
```

```php
Invoiced\Note JSON: <%= json data.notes.create %>
```

```python
<Note id=501 at 0x3fdbf95e4d08> JSON: <%= json data.notes.create %>
```

```java
com.invoiced.entity.Note@e48fa2a JSON: <%= json data.notes.create %>
```

```csharp
Invoiced.Note<501> <%= json data.notes.create %>
```

```go
<Note id=501 at e48fa2a> JSON: <%= json data.notes.create %>
```

Use this endpoint to create a note related to a customer or invoice.

Either `customer_id` or `invoice_id` is required, but not both.

### HTTP Request

`POST /notes`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**customer_id** | *integer* | Associated customer's unique ID
**invoice_id** | *integer* | Associated invoice's unique ID
**notes** | *string* | Contents of note

## Retrieve notes

```shell
curl "https://api.invoiced.com/invoice/:id/notes" \
  -u {API_KEY}: \
```

```ruby
invoice = invoiced.Invoice.retrieve("{INVOICE_ID}")
notes, metadata = invoice.notes.list(:per_page => 3)
```

```php
<?php

$invoice = $invoiced->Invoice->retrieve("{INVOICE_ID}");
list($notes, $metadata) = $invoice->notes()->all(['per_page' => 3]);
```

```python
invoice = client.Invoice.retrieve("{INVOICE_ID}")
notes, metadata = invoice.list_notes().list(per_page=3)
```

```java
Invoice invoice = invoiced.newInvoice().retrieve({INVOICE_ID});
EntityList<Note> notes = invoice.newNote().listAll();
```

```csharp
var invoice = invoiced.NewInvoice().Retrieve({INVOICE_ID});
var notes = invoice.NewNote().ListAll();
```

```go
invoice, err := invoiced.NewInvoice().Retrieve({INVOICE_ID})
notes, err := invoice.RetrieveNotes()
```

> The above command returns JSON structured like this:

```shell
[
  <%= json data.notes.create, 1 %>
]
```

```ruby
[
  #<Invoiced::Note:0x3fdbf95e4d08 id=501> JSON: <%= json data.notes.create, 1 %>
]
```

```php
[
  Invoiced\Note JSON: <%= json data.notes.create, 1 %>
]
```

```python
[
  <Note id=501 at 0x3fdbf95e4d08> JSON: <%= json data.notes.create, 1 %>
]
```

```java
[
  com.invoiced.entity.Note@e48fa2a JSON: <%= json data.notes.create, 1 %>
]
```

```csharp
[
  Invoiced.Note<501> <%= json data.notes.create, 1 %>
]
```

```go
[
  <Note id=501 at e48fa2a> JSON: <%= json data.notes.create, 1 %>
]
```

Use this endpoint to retrieve a list of notes associated with a certain customer or invoice.

### HTTP Request

`GET /customer/:id/notes` or `GET /invoice/:id/notes`

## Update a note

```shell
curl "https://api.invoiced.com/notes/:id" \
  -u {API_KEY}: \
  -X PATCH \
  -d notes="Customer called 10/2, sent check arriving Thu."
```

```ruby
note.notes = "Customer called 10/2, sent check arriving Thu."
note.save
```

```php
<?php

$note->notes = "Customer called 10/2, sent check arriving Thu.";
$note->save();
```

```python
note.notes = "Customer called 10/2, sent check arriving Thu."
note.save()
```

```java
note.notes = "Customer called 10/2, sent check arriving Thu.";
note.save();
```

```csharp
note.Notes = "Customer called 10/2, sent check arriving Thu.";
note.SaveAll();
```

```go
note.Notes = "Customer called 10/2, sent check arriving Thu."
err := note.Save()
```

> The above command returns JSON structured like this:

```shell
<%= json data.notes._update %>
```

```ruby
#<Invoiced::Note:0x3fdbf95e4d08 id=501> JSON: <%= json data.notes._update %>
```

```php
Invoiced\Note JSON: <%= json data.notes._update %>
```

```python
<Note id=501 at 0x3fdbf95e4d08> JSON: <%= json data.notes._update %>
```

```java
com.invoiced.entity.Note@e48fa2a JSON: <%= json data.notes._update %>
```

```csharp
Invoiced.Note<501> <%= json data.notes._update %>
```

```go
<Note id=501 at e48fa2a> JSON: <%= json data.notes._update %>
```

Use this endpoint to update a note.

### HTTP Request

`PATCH /notes/:id`

### Attributes

Parameter | Type | Description
--------- | ---- | -----------
**notes** | *string* | Contents of note

## Delete a note

```shell
curl "https://api.invoiced.com/notes/:id/" \
  -u {API_KEY}: \
  -X DELETE
```

```ruby
note.delete
```

```php
<?php

$note->delete();
```

```python
note.delete()
```

```java
note.delete();
```

```csharp
note.Delete();
```

```go
err := note.Delete()
```

> The above command returns `204 No Content`

Use this endpoint to delete a note.

### HTTP Request

`DELETE /notes/:id`

## List all notes

```shell
curl "https://api.invoiced.com/notes" \
  -u {API_KEY}:
```

```ruby
notes, metadata = invoiced.Note.list(:per_page => 3)
```

```php
<?php

list($notes, $metadata) = $invoiced->Note->all(['per_page' => 3]);
```

```python
notes, metadata = invoiced.Note.list(per_page=3)
```

```java
EntityList<Note> notes = conn.newNote().listAll();
```

```csharp
var notes = invoiced.NewNote().ListAll();
```

```go
notes, err := invoiced.NewNote().ListAll(nil, nil)
```

> The above command returns JSON structured like this:

```shell
[
  <%= json data.notes.create, 1 %>
]
```

```ruby
[
  #<Invoiced::Note:0x3fdbf95e4d08 id=501> JSON: <%= json data.notes.create, 1 %>
]
```

```php
[
  Invoiced\Note JSON: <%= json data.notes.create, 1 %>
]
```

```python
[
  <Note id=501 at 0x3fdbf95e4d08> JSON: <%= json data.notes.create, 1 %>
]
```

```java
[
  com.invoiced.entity.Note@c509a57 JSON: <%= json data.notes.create, 1 %>
]
```

```csharp
[
  Invoiced.Note<501> <%= json data.notes.create, 1 %>
]
```

```go
[
  <Note id=501 at c509a57> JSON: <%= json data.notes.create, 1 %>
]
```

This endpoint retrieves all notes.

### HTTP Request

`GET /notes`

### Query Parameters

Parameter | Description
--------- | -----------
**sort** *string* | Column to sort by, i.e. `name asc`
**filter** *object* | Filter object
